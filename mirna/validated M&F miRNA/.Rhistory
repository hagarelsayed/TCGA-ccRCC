# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path ="D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/rstudio/integrative/miRNA/miRNA_data/data"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <-  read_delim("D:/rstudio/integrative/miRNA/miRNA_sample sheet.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
# for simplifying the analysis (and for time considerations) we will consider only  20 sample from each type (normal and cancer)
sample.no=52
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
normal.samples=all.normal.samples[1:sample.no]
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
tumor.samples=all.tumor.samples[1:sample.no]
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(normal.samples,tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
dds.run = DESeq(dds)
### direct results or specifying teh contrast (to make a res object based on two specific conditions/treatment)
res=results(dds.run)
res=results(dds.run, contrast = c("Sample.Type",cond1 ,cond2) )
# remove nulls
res=res[complete.cases(res), ]
summary(res)
res.df=as.data.frame(res)
getwd()
write.table(res.df, file = "res.txt")
plotMA(res, ylim=c(-1,1))
summary (res)
res.degs=res.df[res.df$padj< 0.05 & abs(res.df$log2FoldChange)>log2(2),]
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <-  read_delim("D:/rstudio/integrative/miRNA/miRNA_sample sheet.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% all.normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% all.tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
pheno.sub
View(pheno.sub)
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
View(exp.sub)
View(pheno)
BiocManager::install("org.Hs.eg.db")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
clin_1 <- read_delim("D:/mirna/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
class(clin_1)
as.data.frame(clin_1)
class(clin_1)
as.data.frame(clin_1)
x= as.data.frame(clin_1)
View(x)
clinical = clin_1 [,(clin_1$submitter_id,clin_1$gender)]
load("D:/rstudio/integrative/miRNA_data/microRNA-seq.RDATA")
a = clin_1 [,clin_1$submitter_id]
clin_1 <- read_delim("D:/mirna/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
x= clin_1
x= as.data.frame(clin_1)
a = x[,x$submitter_id]
a = x[,2]
View(a)
b= x[,13]
View(b)
class(b)
clinical = cbind(a,b)
View(clinical)
names(clinical)[1] = ("Case ID")
View(clinical)
names(clinical)[1] = "Case ID"
View(clinical)
colnames(clinical)[1] = c(Case ID)
colnames(clinical)[1] = c(Case.ID)
#colnames(clinical)[1] = c(Case.ID)
pheno <- read_delim("D:/mirna/only mirna no isoform/gdc_sample_sheet.2019-11-17.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(pheno
)
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
clin_1 <- read_delim("D:/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
class(clin_1)
clin_1_df= as.data.frame(clin_1)
a = clin_1_df[,clin_1_df$submitter_id]
clin_1 <- read_delim("D:/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
class(clin_1)
clin_1_df= as.data.frame(clin_1)
a = clin_1_df[,clin_1_df$submitter_id]
a = clin_1_df[,2]
b= clin_1_df[,13]
clinical = cbind(a,b)
View(clinical)
clinical.df = as.data.frame(clinical)
names(clinical.df)=c("Case ID","Gender")
pheno <- read_delim("D:/mRNA in ccRCC/gdc_sample_sheet.2019-11-20.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
cl=clinical.df
p = pheno
merged_pheno=merge(p,cl,by="Case ID")
dim(merged_pheno)
#[1] 1222    9
dupl=duplicated(merged_pheno$`Case ID`)
sum(dupl)
table(merged_pheno$`Sample Type`,merged_pheno$Gender)
dupl=duplicated(merged_pheno$`Case ID`)
sum(dupl)
dupl.df=duplicated.data.frame(merged)
dupl.df=duplicated.data.frame(merged_pheno)
sum(dupl.df)
# [1] 616
copy_merged= merged_pheno
no_dupl= distinct(copy_merged)
library("dplyr")
no_dupl= distinct(copy_merged)
table(no_dupl$`Sample Type`,no_dupl$Gender)
View(no_dupl)
getwd()
setwd("D:/mRNA in ccRCC/m & f")
write.table(no_dupl, file = "pheno & gender.txt")
pheno_updated = no_dupl
View(pheno_updated)
n_f = which(pheno_updated$`Sample Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("female"))
t_f = which(pheno_updated$`Sample Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("female"))
n_m = which(pheno_updated$`Sample Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("male"))
t_m = which(pheno_updated$`Sample Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("male"))
all_n_f_samples = pheno_updated[n_f,]$`Sample ID`
all_t_f_samples = pheno_updated[t_f,]$`Sample ID`
all_n_m_samples = pheno_updated[n_m,]$`Sample ID`
all_t_m_samples = pheno_updated[t_m,]$`Sample ID`
##### load the mRNA-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/rna-seq/gdc_download_20181218_104546.268332"
data.path= "D:/mRNA in ccRCC/gdc_download_20191120_094514.709651"
files <- list.files(path=data.path,recursive=T, pattern = "gz")
View(files)
# read the first file for the first time
file=files[1]
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
gz.con=gzfile(file.path(data.path,files[1]))
temp <- read.table(gz.con, header=F)
#create a storing object mrna.exp to save the whole read counts of each file read in an iteration
mrna.exp=temp
rownames(mrna.exp)=mrna.exp[,1]
mrna.exp=mrna.exp[-1]
rm(cl)
rm(clin_1)
rm(clin_1_df)
rm(clinical)
rm(clinical.df)
rm(p)
rm(no_dupl)
rm(copy_merged)
rm(merged_pheno)
View(mrna.exp)
colnames(mrna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
gz.con=gzfile(file.path(data.path,files[i]))
temp <- read.table(gz.con, header=F)
## remove the first column, bec we had it already
temp=temp[-1]
colnames(temp)=c(file.id)
mrna.exp=cbind(mrna.exp,temp)
}
View(mrna.exp)
# prepare the ensembel id to be like the one in the database
ensemble.id=sapply(rownames(mrna.exp), function(x) strsplit(as.character(x),"\\.")[[1]][1])
View(ensemble.id)
mrna.exp=cbind(ensemble.id,mrna.exp)
mapper<- mapIds(org.Hs.eg.db, keys=ensemble.id, column="SYMBOL",keytype="ENSEMBL", multiVals="first") #??????
mapper.df=as.data.frame(mapper)
mapper.df=cbind(rownames(mapper.df), mapper.df)
names(mapper.df)=c("ensemble.id","symbol")
#????? ensembl.id of y
# drop the first column (ensemble.id)
mrna.exp2=mrna.exp2[-1]
mrna.exp2=merge(mrna.exp,mapper.df,by="ensemble.id",all.x=T) #????? ensembl.id of y
# drop the first column (ensemble.id)
mrna.exp2=mrna.exp2[-1]
mrna.exp2=mrna.exp2[ ! is.na(mrna.exp2$symbol),]
# check duplciation of of gene symbols?
x=duplicated(mrna.exp2$symbol)
sum(x)
### yes .. why ? transcripts?  solutions : aggregation
mrna.exp.data=mrna.exp2[-dim(mrna.exp2)[2]]
mrna.exp.data=apply(mrna.exp.data,2, as.numeric)
####remove  duplication by aggregation
mrna.exp.data.agg= aggregate(mrna.exp.data, list(mrna.exp2$symbol),FUN=mean)
rownames(mrna.exp.data.agg)=mrna.exp.data.agg$Group.1
mrna.exp.data.agg=mrna.exp.data.agg[-1]
file.ids=colnames(mrna.exp.data.agg)
View(pheno_updated)
# rename column names : replace the spaces with dots
pheno.names=names(pheno_updated)
names(pheno_updated)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno_updated$Sample.Type)
table(pheno_updated$Sample.Type,pheno_updated$Gender)
View(mrna.exp.data.agg)
View(pheno)
save.image("D:/mRNA in ccRCC/m & f/global environment/global.RData")
getwd()
write.table(pheno_updated, file="pheno_updated.tsv", quote = F, col.names = F, row.names = F)
write.table(pheno, file="pheno_updated.tsv", quote = F, col.names = F, row.names = F)
write.table(pheno_updated, file="pheno_updated.tsv", quote = F, col.names = F, row.names = F)
write.table(pheno, file="pheno_only.tsv", quote = F, col.names = F, row.names = F)
#we will rename the columns of our exp data with the sample ids columns of the pheno file
#however we need to match the file ids to
pheno ==pheno_updated
#we will rename the columns of our exp data with the sample ids columns of the pheno file
#however we need to match the file ids to
pheno$`File ID` ==pheno_updated$File.ID
file.ids.pheno=pheno_updated$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mrna.exp.data.agg)=pheno_updated$Sample.ID[index.files]
n_f = which(pheno_updated$`Sample Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("female"))
n_f = which(pheno_updated$`Sample.Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("female"))
t_f = which(pheno_updated$`Sample.Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("female"))
n_m = which(pheno_updated$`Sample.Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("male"))
t_m = which(pheno_updated$`Sample.Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("male"))
all_n_f_samples = pheno_updated[n_f,]$`Sample.ID`
all_t_f_samples = pheno_updated[t_f,]$`Sample.ID`
all_n_m_samples = pheno_updated[n_m,]$`Sample.ID`
all_t_m_samples = pheno_updated[t_m,]$`Sample.ID`
normal.exp_f =mrna.exp[, names(mrna.exp)%in% all_n_f_samples]
normal.exp_f =mrna.exp.data.agg[, names(mrna.exp.data.agg)%in% all_n_f_samples]
tumor.exp_f = mrna.exp.data.agg[, names(mrna.exp.data.agg)%in% all_n_f_samples]
tumor.exp_f = mrna.exp.data.agg[, names(mrna.exp.data.agg)%in% all_t_f_samples]
pheno.sub_f=pheno_updated[pheno_updated$Sample.ID %in% c(all_n_f_samples,all_t_f_samples), c("Sample.ID", "Sample.Type")]
exp.sub_f=cbind(normal.exp_f,tumor.exp_f)
exp.sub=apply (exp.sub_f, 2,as.integer)
rownames(exp.sub_f)=rownames(normal.exp_f)
exp.sub_f=apply (exp.sub_f, 2,as.integer)
rm(exp.sub)
View(exp.sub_f)
rownames(exp.sub_f)=rownames(normal.exp_f)
#DO the differential EXP analysis using DeSeq2
cond1f="Solid Tissue Normal"
cond2f="Primary Tumor"
dim(exp.sub_f)
dim(pheno.sub_f)
dds = DESeqDataSetFromMatrix( countData = exp.sub_f , colData = pheno.sub_f , design = ~ Sample.Type)
dds_f = DESeqDataSetFromMatrix( countData = exp.sub_f , colData = pheno.sub_f , design = ~ Sample.Type)
dds.run_f = DESeq(dds_f)
### direct results or specifying the contrast (to make a res object based on two specific conditions/treatment)
res_f=results(dds.run_f)
### direct results or specifying the contrast (to make a res object based on two specific conditions/treatment)
res_f=results(dds.run_f)
res_f=results(dds.run_f, contrast = c("Sample.Type",cond1f ,cond2f) )
# remove nulls
res_f=res_f[complete.cases(res_f), ]
summary(res_f)
res.df_f=as.data.frame(res_f)
res.degs_f=res.df_f[res.df_f$padj< 0.01 & abs(res.df_f$log2FoldChange)>log2(2),]
write.xlsx(res.degs_f, file = "res_degs_f.xlsx")
write.table(res.degs_f, file = "res_degs_f.xlsx")
#for Tfmir
res.degs_f$regulation=0
res.degs_f=as.data.frame(res.degs_f)
res.degs_f[res.degs_f$log2FoldChange<0,]$regulation =-1
res.degs_f[res.degs_f$log2FoldChange>0,]$regulation =1
res.degs2_f= cbind(rownames(res.degs_f), res.degs_f$regulation)
write.table(res.degs2_f, file("res_reg_f.tsv"))
getwd()
#expression of these degs for plots
exp.degs_f= exp.sub_f[rownames(exp.sub_f) %in% rownames(res.degs_f), ]
View(res.degs_f)
View(res.degs2_f)
write.table(res.degs2_f, file("res_reg_f.tsv"), quote = F, col.names = F, row.names = F)
View(exp.degs_f)
#### get the normalized and loggedtransformed values of all exp data
#using the the variance stabilizing transformation. vsn package
ntd_f=normTransform(dds_f)
exp.sub.norm_f= assay(ntd_f)
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res_f, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res_f, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res_f, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res_f, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
write.table(exp.degs_f, file = "exp_degs_f.xlsx")
getwd()
write.table(res.degs_f, file = "res_degs_f1.txt")
write.table(res.degs2_f, file("res_reg_f.tsv1"), quote = F, col.names = F, row.names = F)
write.table(exp.degs_f, file = "exp_degs_f.txt")
write.table(res.degs2_f, file("res_reg_f1.tsv"), quote = F, col.names = F, row.names = F)
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
data.path="D:/mirna/validated M&F miRNA/gdc_download_20191121_192643.372334"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
pheno <-  read_delim("D:/mirna/validated M&F miRNA/gdc_sample_sheet.2019-11-21.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
library("dplyr")
clin_1 <- read_delim("D:/mirna/validated M&F miRNA/clinical.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
class(clin_1)
clin_1_df= as.data.frame(clin_1)
a = clin_1_df[,2]
b= clin_1_df[,13]
clinical = cbind(a,b)
View(clinical)
clinical.df = as.data.frame(clinical)
names(clinical.df)=c("Case ID","Gender")
cl=clinical.df
p = pheno
merged_pheno=merge(p,cl,by="Case ID")
dim(merged_pheno)
dupl.df=duplicated.data.frame(merged_pheno)
sum(dupl.df)
copy_merged= merged_pheno
no_dupl= distinct(copy_merged)
table(no_dupl$`Sample Type`,no_dupl$Gender)
getwd()
setwd("D:/mirna/validated M&F miRNA")
write.table(no_dupl, file = "updated_pheno_miRNA.txt")
pheno_updated = no_dupl
View(pheno_updated)
rm(cl)
rm(clin_1)
rm(clin_1_df)
rm(clinical)
rm(clinical.df)
rm(copy_merged)
rm(p)
rm(merged_pheno)
rm(no_dupl)
# rename column names : replace the spaces with dots
pheno.names=names(pheno_updated)
names(pheno_updated)= as.character( sapply ( pheno_updates.names, function(x) gsub(" ",".",x)))
names(pheno_updated)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno_updated$Sample.Type)
table(pheno_updated$Sample.Type,pheno_updated$Gender)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
file.ids.pheno=pheno_updated$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno_updated$Sample.ID[index.files]
n_f = which(pheno_updated$`Sample.Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("female"))
t_f = which(pheno_updated$`Sample.Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("female"))
all_n_f_samples = pheno_updated[n_f,]$`Sample.ID`
all_t_f_samples = pheno_updated[t_f,]$`Sample.ID`
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp_f=mirna.exp[, names(mirna.exp)%in% all_n_f_samples]
tumor.exp_f =mirna.exp[, names(mirna.exp)%in% all_t_f_samples]
pheno.sub_f=pheno_updated[pheno_updated$Sample.ID %in% c(all_n_f_samples,all_t_f_samples), c("Sample.ID", "Sample.Type")]
exp.sub_f=cbind(normal.exp_f,tumor.exp_f)
exp.sub_f=apply (exp.sub_f, 2,as.integer)
rownames(exp.sub_f)=rownames(normal.exp_f)
save(mirna.exp,pheno_updated, exp.sub_f,pheno.sub_f ,file="microRNA-seq.RDATA")
write.table(res.df_f, file = "res.txt")
###### DO the differential EXP analysis using DeSeq2
cond1f="Solid Tissue Normal"
cond2f="Primary Tumor"
dim(exp.sub_f)
dim(pheno.sub_f)
dds_f = DESeqDataSetFromMatrix( countData = exp.sub_f , colData = pheno.sub_f , design = ~ Sample.Type)
dds.run_f = DESeq(dds_f)
res_f=results(dds.run_f)
res_f=results(dds.run_f, contrast = c("Sample.Type",cond1f ,cond2f) )
# remove nulls
res_f=res_f[complete.cases(res_f), ]
summary(res_f)
res.df_f=as.data.frame(res_f)
write.table(res.df_f, file = "res.txt")
getwd()
plotMA(res, ylim=c(-1,1))
plotMA(res_f, ylim=c(-1,1))
summary (res)
summary (res_f)
res.degs_f=res.df_f[res.df_f$padj< 0.05 & abs(res.df_f$log2FoldChange)>log2(2),]
res.degs_f=res.df_f[res.df_f$padj< 0.05 & abs(res.df_f$log2FoldChange)>log2(2),]
res.df_f=as.data.frame(res_f)
write.table(res.df_f, file = "res_f_mirna.txt")
res.degs_f=res.df_f[res.df_f$padj< 0.05 & abs(res.df_f$log2FoldChange)>log2(2),]
write.table(res.degs_f, file = "res_degs_f.xlsx")
#for Tfmir
res.degs_f$regulation=0
res.degs_f=as.data.frame(res.degs_f)
res.degs_f[res.degs_f$log2FoldChange<0,]$regulation =-1
res.degs_f[res.degs_f$log2FoldChange>0,]$regulation =1
res.degs2_f= cbind(rownames(res.degs_f), res.degs_f$regulation)
write.table(res.degs2_f, file("res_reg_f_mirna.tsv"), quote = F, col.names = F, row.names = F)
#expression of these degs for plots
exp.degs_f= exp.sub_f[rownames(exp.sub_f) %in% rownames(res.degs_f), ]
write.table(exp.degs_f, file = "exp_dems_f.xlsx")
#######################################
#### get the normalized and loggedtransformed values of all exp data
#using the the variance stabilizing transformation. vsn package
ntd_f=normTransform(dds_f)
exp.sub.norm_f= assay(ntd_f)
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res_f, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res_f, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res_f, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
write.table(exp.degs_f, file = "exp_dems_f_mirna.txt")
write.table(res.degs_f, file = "res_degs_f.txt")
