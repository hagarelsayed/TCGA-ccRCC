two_dice <- function() {
+   possibilities <- 1:6
+   dice1 <- sample(possibilities, size = 1)
+   dice2 <- sample(possibilities, size = 1)
+   dice1 + dice2
+ }
dice1 + dice2
+
pow_two <- function(x) {
y <- x ^ 2
return(y)
}
pow_two <- function(x) {
y <- x ^ 2
return(y)
}
pow_two(4)
y
x
two_dice <- function() {
possibilities <- 1:6
dice1 <- sample(possibilities, size = 1)
dice2 <- sample(possibilities, size = 1)
dice1 + dice2
}
two_dice()
two_dice()
two_dice()
two_dice()
two_dice()
two_dice()
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path ="D:/mirna/only mirna no isoform/gdc_download_20191117_081915.282629"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
View(mirna.exp)
View(temp)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <- read_delim("D:/mirna/only mirna no isoform/gdc_sample_sheet.2019-11-17.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
#normal.exp=mirna.exp[, names(mirna.exp)%in% normal.samples]
normal.exp=mirna.exp[, names(mirna.exp)%in% all.normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% all.tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
View(exp.sub)
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
dds.run = DESeq(dds)
### direct results or specifying teh contrast (to make a res object based on two specific conditions/treatment)
res=results(dds.run)
View(res)
res=results(dds.run, contrast = c("Sample.Type",cond1 ,cond2) )
# remove nulls
res=res[complete.cases(res), ]
summary(res)
View(res)
res.df=as.data.frame(res)
View(res.df)
write.table(res.df, file = "res.txt")
plotMA(res, ylim=c(-1,1))
summary (res)
res.degs=res.df[res.df$padj< 0.05 & abs(res.df$log2FoldChange)>log2(2),]
#### get the normalized and loggedtransformed values of all exp data
#using the the variance stabilizing transformation. vsn package
ntd=normTransform(dds)
exp.sub.norm= assay(ntd)
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/both mirna and isoform/gdc_download_20191117_080816.934455"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
getwd()
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/both mirna and isoform/gdc_download_20191117_080816.934455"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
View(temp)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <- read_delim("D:/mirna/both mirna and isoform/gdc_sample_sheet.2019-11-17.tsv","\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/both mirna and isoforr/gdc_download_20191117_120704.351703"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <- read_delim("D:/mirna/both mirna and isoforr/gdc_sample_sheet.2019-11-17.tsv","\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
View(pheno)
View(mirna.exp)
pheno
pheno
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
View(mirna.exp)
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% all.normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% all.tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(normal.samples,tumor.samples), c("Sample.ID", "Sample.Type")]
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
View(pheno.sub)
exp.sub=cbind(normal.exp,tumor.exp)
View(exp.sub)
exp.sub=apply (exp.sub, 2,as.integer)
View(normal.exp)
View(exp.sub)
rownames(exp.sub)=rownames(normal.exp)
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
View(exp.sub)
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
getwd()
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path ="D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/rstudio/integrative/miRNA/miRNA_data/data"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <-  read_delim("D:/rstudio/integrative/miRNA/miRNA_sample sheet.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
# for simplifying the analysis (and for time considerations) we will consider only  20 sample from each type (normal and cancer)
sample.no=52
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
normal.samples=all.normal.samples[1:sample.no]
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
tumor.samples=all.tumor.samples[1:sample.no]
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(normal.samples,tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
dds.run = DESeq(dds)
### direct results or specifying teh contrast (to make a res object based on two specific conditions/treatment)
res=results(dds.run)
res=results(dds.run, contrast = c("Sample.Type",cond1 ,cond2) )
# remove nulls
res=res[complete.cases(res), ]
summary(res)
res.df=as.data.frame(res)
getwd()
write.table(res.df, file = "res.txt")
plotMA(res, ylim=c(-1,1))
summary (res)
res.degs=res.df[res.df$padj< 0.05 & abs(res.df$log2FoldChange)>log2(2),]
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <-  read_delim("D:/rstudio/integrative/miRNA/miRNA_sample sheet.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% all.normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% all.tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
pheno.sub
View(pheno.sub)
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
View(exp.sub)
View(pheno)
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
library(readr)
##### load the mirna-Seq data #####
# data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only mirna no isoform/gdc_download_20191117_081915.282629"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
View(temp)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
View(mirna.exp)
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
View(mirna.exp)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
View(mirna.exp)
getwd()
setwd("D:/mirna/only mirna no isoform")
getwd()
save(mirna.exp,file="mirna.exp.RDATA")
save(mirna.exp,file="mirna.exp.tsv")
save(mirna.exp,file="mirna.exp.txt")
View(mirna.exp)
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <- read_delim("D:/mirna/only mirna no isoform/gdc_sample_sheet.2019-11-17.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
View(pheno)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% all.normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% all.tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(normal.samples,tumor.samples), c("Sample.ID", "Sample.Type")]
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
View(pheno.sub)
exp.sub=cbind(normal.exp,tumor.exp)
View(exp.sub)
View(mirna.exp)
View(exp.sub)
exp.sub=apply (exp.sub, 2,as.integer)
View(exp.sub)
rownames(exp.sub)=rownames(normal.exp)
View(exp.sub)
getwd()
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
dds.run = DESeq(dds)
### direct results or specifying teh contrast (to make a res object based on two specific conditions/treatment)
res=results(dds.run)
res=results(dds.run, contrast = c("Sample.Type",cond1 ,cond2) )
# remove nulls
res=res[complete.cases(res), ]
summary(res)
res.df=as.data.frame(res)
write.table(res.df, file = "res.txt")
getwd()
setwd("D:/mirna/only mirna no isoform/result")
write.table(res.df, file = "res.txt")
plotMA(res, ylim=c(-1,1))
plotMA(res, ylim=c(-1,1))
summary (res)
res.degs=res.df[res.df$padj< 0.05 & abs(res.df$log2FoldChange)>log2(2),]
View(res.degs)
write.table(res.degs, file = "res_dems.txt")
#### get the normalized and loggedtransformed values of all exp data
#using the the variance stabilizing transformation. vsn package
ntd=normTransform(dds)
exp.sub.norm= assay(ntd)
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#for Tfmir
res.degs$regulation=0
res.degs=as.data.frame(res.degs)
res.degs[res.degs$log2FoldChange<0,]$regulation =-1
res.degs[res.degs$log2FoldChange>0,]$regulation =1
res.degs2= cbind(rownames(res.degs), res.degs$regulation)
write.table(res.degs2, file("res_reg.tsv"))
View(res.degs2)
getwd()
write.table(res.degs2, file("res_reg2.tsv" , header = F, quote()=F, rownames() = F))
write.table(res.degs2, file("res_reg2.tsv" , header = F, quote=F, rownames = F))
?write.table
write.table(res.degs2, file("res_reg2.tsv" , colnames(res.degs2) = F, quote(res.degs2)=F, row.names(res.degs2)= F))
write.table(res.degs2, file("res_reg2.tsv" , colnames = F, quote =F, row.names = F))
write.table(res.degs2, file("res_reg2.tsv" , col.names = F, quote =F, row.names = F))
View(res.degs2)
write.table(res.degs2, file="res_reg2.tsv" ,quote =F, row.names =F ,col.names = F)
##### load the mirna-Seq data #####
# data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/rstudio/integrative/miRNA/miRNA_data/data/00f98c5e-ffce-4338-91ca-da916646797a"
##### load the mirna-Seq data #####
# data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/rstudio/integrative/miRNA/miRNA_data/data/00f98c5e-ffce-4338-91ca-da916646797a"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
