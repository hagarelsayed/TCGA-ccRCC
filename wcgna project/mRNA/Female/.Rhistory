exp.sub=cbind(normal.exp,tumor.exp)
View(exp.sub)
exp.sub=apply (exp.sub, 2,as.integer)
View(normal.exp)
View(exp.sub)
rownames(exp.sub)=rownames(normal.exp)
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
View(exp.sub)
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
getwd()
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path ="D:/mirna/only isoform/gdc_download_20191117_123631.594725"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
##### load the mirna-Seq data #####
#data.path="E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_download_20181218_230142.517289"
data.path = "D:/rstudio/integrative/miRNA/miRNA_data/data"
files <- list.files(path=data.path,recursive=T, pattern = "mirnas.quantification.txt")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
temp <- read.table(file.path(data.path,files[1]), header=T)
#create a storing object mirna.exp to save the whole read counts of each file read in an iteration
mirna.exp=cbind(temp[1],temp[2])
rownames(mirna.exp)=mirna.exp[,1]
mirna.exp=mirna.exp[-1]
colnames(mirna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
temp <- read.table(file.path(data.path,files[i]), header=T)
## remove the first column, bec we had it already
temp=temp[2]
colnames(temp)=c(file.id)
mirna.exp=cbind(mirna.exp,temp)
}
pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <-  read_delim("D:/rstudio/integrative/miRNA/miRNA_sample sheet.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
# for simplifying the analysis (and for time considerations) we will consider only  20 sample from each type (normal and cancer)
sample.no=52
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
normal.samples=all.normal.samples[1:sample.no]
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
tumor.samples=all.tumor.samples[1:sample.no]
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(normal.samples,tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
save(mirna.exp,pheno, exp.sub,pheno.sub ,file="microRNA-seq.RDATA")
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
dds = DESeqDataSetFromMatrix( countData = exp.sub , colData = pheno.sub , design = ~ Sample.Type)
dds.run = DESeq(dds)
### direct results or specifying teh contrast (to make a res object based on two specific conditions/treatment)
res=results(dds.run)
res=results(dds.run, contrast = c("Sample.Type",cond1 ,cond2) )
# remove nulls
res=res[complete.cases(res), ]
summary(res)
res.df=as.data.frame(res)
getwd()
write.table(res.df, file = "res.txt")
plotMA(res, ylim=c(-1,1))
summary (res)
res.degs=res.df[res.df$padj< 0.05 & abs(res.df$log2FoldChange)>log2(2),]
# Make a basic volcano plot
par(mfrow=c(1,1))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
#pheno <-  read_delim("E:/Bioinformatics/Diploma bioinformatics/Nile/integrative bioinformatics/data/microRNA/gdc_sample_sheet.2018-12-18.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
pheno <-  read_delim("D:/rstudio/integrative/miRNA/miRNA_sample sheet.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$`Sample Type`)
# rename column names : replace the spaces with dots
pheno.names=names(pheno)
names(pheno)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno$Sample.Type)
file.ids=colnames(mirna.exp)
file.ids.pheno=pheno$File.ID
index.files=match(file.ids,file.ids.pheno)
names(mirna.exp)=pheno$Sample.ID[index.files]
all.normal.samples= pheno[ pheno$Sample.Type %in% c("Solid Tissue Normal"),]$Sample.ID
all.tumor.samples= pheno[ pheno$Sample.Type %in% c("Primary Tumor"),]$Sample.ID
# now we will retrieve  the exp data for these 20 samples only and also the pheno data
normal.exp=mirna.exp[, names(mirna.exp)%in% all.normal.samples]
tumor.exp=mirna.exp[, names(mirna.exp)%in% all.tumor.samples]
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
exp.sub=apply (exp.sub, 2,as.integer)
rownames(exp.sub)=rownames(normal.exp)
###### DO the differential EXP analysis using DeSeq2
cond1="Solid Tissue Normal"
cond2="Primary Tumor"
pheno.sub
View(pheno.sub)
pheno.sub=pheno[pheno$Sample.ID %in% c(all.normal.samples,all.tumor.samples), c("Sample.ID", "Sample.Type")]
exp.sub=cbind(normal.exp,tumor.exp)
View(exp.sub)
View(pheno)
BiocManager::install("org.Hs.eg.db")
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
clin_1 <- read_delim("D:/mirna/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
class(clin_1)
as.data.frame(clin_1)
class(clin_1)
as.data.frame(clin_1)
x= as.data.frame(clin_1)
View(x)
clinical = clin_1 [,(clin_1$submitter_id,clin_1$gender)]
load("D:/rstudio/integrative/miRNA_data/microRNA-seq.RDATA")
a = clin_1 [,clin_1$submitter_id]
clin_1 <- read_delim("D:/mirna/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
x= clin_1
x= as.data.frame(clin_1)
a = x[,x$submitter_id]
a = x[,2]
View(a)
b= x[,13]
View(b)
class(b)
clinical = cbind(a,b)
View(clinical)
names(clinical)[1] = ("Case ID")
View(clinical)
names(clinical)[1] = "Case ID"
View(clinical)
colnames(clinical)[1] = c(Case ID)
colnames(clinical)[1] = c(Case.ID)
#colnames(clinical)[1] = c(Case.ID)
pheno <- read_delim("D:/mirna/only mirna no isoform/gdc_sample_sheet.2019-11-17.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(pheno
)
library(readr)
res_f_dems_reg
res_f_dems_reg <- read_table2("D:/male & female/f/res_f_dems_reg.tsv")
?write.table()
class(res_f_dems_reg)
res_f_dems_reg.df =as.data.frame(res_f_dems_reg)
class(res_f_dems_reg.df)
View(res_f_dems_reg.df)
View(res_f_dems_reg)
View(res_f_dems_reg.df)
write.table(res_f_dems_reg.df, file="regdems_f.txt",Quote = F, col.names = T,row.names = F)
write.table(res_f_dems_reg.df, file="regdems_f.txt",quote = F, col.names = T,row.names = F)
getwd()
res_Deg_f <- read_table2("D:/male & female/f/res_reg_f.tsv")
class(res_Deg_f)
res_Deg_f.df = as.data.frame(res_Deg_f)
class(res_Deg_f.df)
write.table(res_Deg_f.df, file="regdegs_f.txt",quote = F, col.names = T,row.names = F)
write.table(res_Deg_f.df, file="regdegs_f_1.txt",quote = F, sep = " ",col.names = T,row.names = F)
write.table(res_f_dems_reg.df, file="regdems_f_1.txt",quote = F, sep = " ", col.names = T,row.names = F)
getwd()
write.table(res_Deg_f.df, file="regdegs_f_2.txt",quote = F, sep = " ",col.names = T,row.names = F, fileEncoding = T)
?sep
write.table(res_Deg_f.df, file="regdegs_f_2.txt",quote = F, sep = "   ",col.names = T,row.names = F)
write.table(res_f_dems_reg.df, file="regdems_f_2.txt",quote = F, sep = "   ", col.names = T,row.names = F)
getwd()
res_Deg_f <- read_table2("D:/male & female/f/res_reg_f.tsv")
write.table(res_f_dems_reg.df, file="regdems_f_3.txt",quote = F, sep = "t", col.names = T,row.names = F)
write.table(res_Deg_f.df, file="regdegs_f_3.txt",quote = F, sep = "t",col.names = T,row.names = F)
write.table(res_Deg_f.df, file="regdegs_f_4.txt",quote = F, sep = "./t",col.names = T,row.names = F)
write.table(res_f_dems_reg.df, file="regdems_f_4.txt",quote = F, sep = "./t", col.names = T,row.names = F)
write.table(res_Deg_f.df, file="regdegs_f_5.txt",quote = F, sep = "\t",col.names = T,row.names = F)
write.table(res_f_dems_reg.df, file="regdems_f_5.txt",quote = F, sep = "\t", col.names = T,row.names = F)
write.table(res_f_dems_reg.df, file="regdems_f_final.txt",quote = F, sep = "\t", col.names = T,row.names = F)
write.table(res_Deg_f.df, file="regdegs_f_final.txt",quote = F, sep = "\t",col.names = T,row.names = F)
DEG_M <- read_table2("C:/Users/EZZ/Downloads/DEG_tfmir_mMM.txt")
class(DEG_M)
DEG_M.df =as.data.frame(DEG_M)
write.table(res_Deg_f.df, file="regdegs_m_final.txt",quote = F, sep = "\t",col.names = T,row.names = F)
Dems_m_reg <- read_table2("D:/tfmir male & female/m/res_m_reg.tsv")
class(Dems_m_reg)
write.table(DEG_M.df.df, file="regdegs_m_final.txt",quote = F, sep = "\t",col.names = T,row.names = F)
DEG_M <- read_table2("C:/Users/EZZ/Downloads/DEG_tfmir_mMM.txt")
class(DEG_M)
DEG_M.df =as.data.frame(DEG_M)
write.table(DEG_M.df.df, file="regdegs_m_final.txt",quote = F, sep = "\t",col.names = T,row.names = F)
x =as.data.frame(DEG_M)
Dems_m_reg <- read_table2("D:/tfmir male & female/m/res_m_reg.tsv")
class(Dems_m_reg)
Dems_m_reg.df = as.data.frame(Dems_m_reg)
class(Dems_m_reg.df)
write.table(Dems_m_reg.df, file="regdems_m_final.txt",quote = F, sep = "\t",col.names = T,row.names = F)
DEG_M <- read_table2("C:/Users/EZZ/Downloads/DEG_tfmir_mMM.txt")
View(DEG_M)
class(DEG_M)
x =as.data.frame(DEG_M)
class(x)
write.table(x, file="regdegs_m_final.txt",quote = F, sep = "\t",col.names = T,row.names = F)
# female dems, table should be converted to dataframe format
res_f_dems_reg <- read_table2("D:/male & female/f/res_f_dems_reg.tsv")
class(res_f_dems_reg)
res_f_dems_reg.df =as.data.frame(res_f_dems_reg)
#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
x = read_delim("D:/tfmir male & female/f/regdems_f_final.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
y = read_delim("D:/tfmir male & female/f/regdems_f_final.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
y.df = as.data.frame(y)
precursors = y.df$`hsa-mir-1-2`
write.table(precursors, file="f_mirna_precursors.txt",quote = F, sep = "\t",col.names = T,row.names = F)
#,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
y = read_delim("D:/tfmir male & female/f/regdems_f_final.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(y)
y.df = as.data.frame(y)
View(y.df)
precursors = y.df$`hsa-mir-1-2`
View(precursors)
prec = y.df[-1]
View(prec)
pres = y.df[-2]
View(pres)
write.table(pres, file="f_mirna_precursorsss.txt",quote = F, sep = "\t",col.names = T,row.names = F)
male_mirna <- read_table2("D:/ccRCC project/mirna/male & female/male/res_m_reg.tsv")
z=as.data.frame(male_mirna)
pres_m = z[-2]
write.table(pres, file="m_mirna_precursorsss.txt",quote = F, sep = "\t",col.names = T,row.names = F)
View(pres_m)
library(GOplot)
library(readr)
female_TAM_enrichment <- read_delim("C:/Users/EZZ/Downloads/TAM/female TAM enrichment.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
res_f_dems <- read_table2("D:/ccRCC project/mirna/male & female/female/res_f_dems.txt")
EC_f_tam = as.data.frame(female_TAM_enrichment)
res_f_dems <- read_table2("D:/ccRCC project/mirna/male & female/female/res_f_dems.txt")
EC_f_mirna =as.data.frame(res_f_dems)
rm(res_f_dems)
rm(female_TAM_enrichment)
circ <- circle_dat(EC_f_tam, EC_f_mirna)
View(EC_f_tam)
View(EC_f_mirna)
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
library("dplyr")
clin_1 <- read_delim("D:/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
clin_1 <- read_delim("D:/ccRCC project/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
class(clin_1)
clin_1_df= as.data.frame(clin_1)
View(clin_1_df)
data.path ="D:/mRNA in ccRCC/gdc_download_20191120_094514.709651"
files <- list.files(path=data.path,recursive=T, pattern = "gz")
data.path ="D:/ccRCC project/mRNA in ccRCC/gdc_download_20191120_094514.709651"
files <- list.files(path=data.path,recursive=T, pattern = "gz")
# read the first file for the first time
file=files[1]
file.id=strsplit(file,"/")[[1]][1]
#open a connection to your gz file and read the file
gz.con=gzfile(file.path(data.path,files[1]))
temp <- read.table(gz.con, header=F)
#create a storing object mrna.exp to save the whole read counts of each file read in an iteration
mrna.exp=temp
rownames(mrna.exp)=mrna.exp[,1]
mrna.exp=mrna.exp[-1]
colnames(mrna.exp)=c(file.id)
for(i in 2: length(files))
{
## refer to the next file (note that we start from index 2, bec we already read the first file)
file=files[i]
file.id=strsplit(file,"/")[[1]][1]
# read the next file
gz.con=gzfile(file.path(data.path,files[i]))
temp <- read.table(gz.con, header=F)
## remove the first column, bec we had it already
temp=temp[-1]
colnames(temp)=c(file.id)
mrna.exp=cbind(mrna.exp,temp)
}
View(mrna.exp)
load("D:/ccRCC project/mRNA in ccRCC/m & f/global environment/global.RData")
View(mrna.exp.data.agg)
workingDir = "D:/ccRCC project/wcgna project/mRNA/Female";
setwd(workingDir);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
tumor.exp_f = mrna.exp.data.agg[, names(mrna.exp.data.agg)%in% all_t_f_samples]
View(pheno_updated)
# rename column names : replace the spaces with dots
pheno.names=names(pheno_updated)
names(pheno_updated)= as.character( sapply ( pheno.names, function(x) gsub(" ",".",x)))
table(pheno_updated$Sample.Type,pheno_updated$Gender)
file.ids.pheno=pheno_updated$File.ID
index.files=match(file.ids,file.ids.pheno)
View(mrna.exp.data.agg)
names(mrna.exp.data.agg)=pheno_updated$Sample.ID[index.files]
n_f = which(pheno_updated$`Sample.Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("female"))
t_f = which(pheno_updated$`Sample.Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("female"))
n_m = which(pheno_updated$`Sample.Type` %in% c("Solid Tissue Normal")  &  pheno_updated$Gender %in% c("male"))
t_m = which(pheno_updated$`Sample.Type` %in% c("Primary Tumor")  &  pheno_updated$Gender %in% c("male"))
all_n_f_samples = pheno_updated[n_f,]$`Sample.ID`
all_t_f_samples = pheno_updated[t_f,]$`Sample.ID`
all_n_m_samples = pheno_updated[n_m,]$`Sample.ID`
all_t_m_samples = pheno_updated[t_m,]$`Sample.ID`
normal.exp_f = mrna.exp.data.agg[, names(mrna.exp.data.agg)%in% all_n_f_samples]
tumor.exp_f = mrna.exp.data.agg[, names(mrna.exp.data.agg)%in% all_t_f_samples]
View(tumor.exp_f)
# Take a quick look at what is in the data set:
dim(femData);
#Read in the female liver data set
femData = tumor.exp_f;
# Take a quick look at what is in the data set:
dim(femData);
names(femData);
datExpr0 = as.data.frame(t(femData[, -c(1:8)]));
View(datExpr0)
gsg = goodSamplesGenes(datExpr0, verbose = 3);
# Load the WGCNA package
library(WGCNA);
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
if (!gsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
if (!gsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
install.packages("flashClust")
library("flashClust")
rm(mapper.df)
rm(mrna.exp)
rm(mrna.exp.data)
rm(mrna.exp2)
rm(temp)
rm(a)
rm(b)
rm(dupl)
rm(dupl.df)
rm(ensemble.id)
rm(file)
rm(file.id)
rm(file.ids)
rm(file.ids.pheno)
rm(files)
rm(gz.con)
rm(i)
rm(mapper)
rm(data.path)
save.image("D:/ccRCC project/wcgna project/mRNA/Female/female wcgna environment 1.R.RData")
?flashClust
sampleTree = flashClust(dist(datExpr0), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
abline(h = 3500000, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 3500000, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
traitData = read_delim("D:/ccRCC project/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
dim(traitData)
names(traitData)
View(traitData)
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
#Read in the female liver data set
femData = tumor.exp_f;
# Take a quick look at what is in the data set:
dim(femData);
names(femData);
datExpr0 = as.data.frame(t(femData[, -c(1:8)]))
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
if (!gsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK
if (!gsg$allOK)
{
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}
# Load the WGCNA package
#install.packages("flashClust")
library("flashClust")
sampleTree = flashClust(dist(datExpr0), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
abline(h = 3500000, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = 3500000, minSize = 10)
table(clust)
# clust 1 contains the samples we want to keep.
keepSamples = (clust==1)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
traitData = read_delim("D:/ccRCC project/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
#=====================================================================================
#
#  Code chunk 7
#
#=====================================================================================
library("readr")
traitData = read_delim("D:/ccRCC project/mRNA in ccRCC/clinical.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
dim(traitData)
names(traitData)
# Form a data frame analogous to expression data that will hold the clinical traits.
ClinicalTraits_mice <- read_csv("D:/ccRCC project/wcgna project/Female-liver/ClinicalTraits.csv")
View(ClinicalTraits_mice)
